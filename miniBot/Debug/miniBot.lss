
miniBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f4  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019c  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018e  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a9  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000092  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000009ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ef       	ldi	r30, 0xF0	; 240
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	21 d0       	rcall	.+66     	; 0x8c <main>
  4a:	50 c0       	rjmp	.+160    	; 0xec <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <uart_init>:
#include <util/delay.h>

void uart_init( void )
{
	//настройка скорости обмена
	UBRRH = 0;
  4e:	10 bc       	out	0x20, r1	; 32
	UBRRL = 5;
  50:	85 e0       	ldi	r24, 0x05	; 5
  52:	89 b9       	out	0x09, r24	; 9
	//UBRRL = ubrr_value;
	//UBRRH = (ubrr_value>>8);
	//8 бит данных, 1 стоп бит, без контроля четности
	UCSRC = ( 1 << URSEL ) | ( 1 << UCSZ1 ) | ( 1 << UCSZ0 );
  54:	86 e8       	ldi	r24, 0x86	; 134
  56:	80 bd       	out	0x20, r24	; 32
	//разрешить прием и передачу данных
	UCSRB = ( 1 << TXEN ) | ( 1 <<RXEN );
  58:	88 e1       	ldi	r24, 0x18	; 24
  5a:	8a b9       	out	0x0a, r24	; 10
  5c:	08 95       	ret

0000005e <uart_getc>:
}

unsigned char uart_getc( void )
{
	//ждем приема байта
	while( ( UCSRA & ( 1 << RXC ) ) == 0  );
  5e:	5f 9b       	sbis	0x0b, 7	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <uart_getc>
	//считываем принятый байт
	return UDR;
  62:	8c b1       	in	r24, 0x0c	; 12
}
  64:	08 95       	ret

00000066 <uart_putc>:

void uart_putc( char c )
{
	//ждем окончания передачи предыдущего байта
	while( ( UCSRA & ( 1 << UDRE ) ) == 0 );
  66:	5d 9b       	sbis	0x0b, 5	; 11
  68:	fe cf       	rjmp	.-4      	; 0x66 <uart_putc>
	UDR = c;
  6a:	8c b9       	out	0x0c, r24	; 12
  6c:	08 95       	ret

0000006e <uart_puts>:
}

void uart_puts( char *str )
{
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
	unsigned char c;
	while( ( c = *str++ ) != 0 ) {
  72:	ec 01       	movw	r28, r24
  74:	21 96       	adiw	r28, 0x01	; 1
  76:	fc 01       	movw	r30, r24
  78:	80 81       	ld	r24, Z
  7a:	88 23       	and	r24, r24
  7c:	21 f0       	breq	.+8      	; 0x86 <uart_puts+0x18>
		uart_putc( c );
  7e:	f3 df       	rcall	.-26     	; 0x66 <uart_putc>
}

void uart_puts( char *str )
{
	unsigned char c;
	while( ( c = *str++ ) != 0 ) {
  80:	89 91       	ld	r24, Y+
  82:	81 11       	cpse	r24, r1
  84:	fc cf       	rjmp	.-8      	; 0x7e <uart_puts+0x10>
		uart_putc( c );
	}
}
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <main>:

int main( void )
{
	uart_init();
  8c:	e0 df       	rcall	.-64     	; 0x4e <uart_init>
	OSCCAL = 150;
  8e:	86 e9       	ldi	r24, 0x96	; 150
  90:	81 bf       	out	0x31, r24	; 49
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	87 ea       	ldi	r24, 0xA7	; 167
  94:	91 e6       	ldi	r25, 0x61	; 97
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0xa>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x10>
  9c:	00 00       	nop
	_delay_ms( 100 );
	uart_puts( "Hello uart\r\n" );
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	e5 df       	rcall	.-54     	; 0x6e <uart_puts>
	while( 1 ) {
		char c = uart_getc();
  a4:	dc df       	rcall	.-72     	; 0x5e <uart_getc>
		if(c=='s') {
  a6:	83 37       	cpi	r24, 0x73	; 115
  a8:	29 f4       	brne	.+10     	; 0xb4 <main+0x28>
			PORTC &= ~_BV(PC1); // установить "0" на линии 1 порта C
  aa:	a9 98       	cbi	0x15, 1	; 21
			PORTC |= _BV(PC2); // установить "1" на линии 2 порта C
  ac:	aa 9a       	sbi	0x15, 2	; 21
			PORTC &= ~_BV(PC3); // установить "0" на линии 3 порта C
  ae:	ab 98       	cbi	0x15, 3	; 21
			PORTC |= _BV(PC4); // установить "1" на линии 4 порта C
  b0:	ac 9a       	sbi	0x15, 4	; 21
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <main+0x44>
		} 
		if (c=='w')/*forward*/ {
  b4:	87 37       	cpi	r24, 0x77	; 119
  b6:	29 f4       	brne	.+10     	; 0xc2 <main+0x36>
			PORTC |= _BV(PC1); // установить "1" на линии 1 порта C
  b8:	a9 9a       	sbi	0x15, 1	; 21
			PORTC &= ~_BV(PC2); // установить "0" на линии 2 порта C
  ba:	aa 98       	cbi	0x15, 2	; 21
			PORTC |= _BV(PC3); // установить "1" на линии 3 порта C
  bc:	ab 9a       	sbi	0x15, 3	; 21
			PORTC &= ~_BV(PC4); // установить "0" на линии 4 порта C
  be:	ac 98       	cbi	0x15, 4	; 21
  c0:	0e c0       	rjmp	.+28     	; 0xde <main+0x52>
		} 
		if (c=='x') {
  c2:	88 37       	cpi	r24, 0x78	; 120
  c4:	29 f4       	brne	.+10     	; 0xd0 <main+0x44>
			PORTC &= ~_BV(PC1); // установить "0" на линии 1 порта C
  c6:	a9 98       	cbi	0x15, 1	; 21
			PORTC &= ~_BV(PC2); // установить "0" на линии 2 порта C
  c8:	aa 98       	cbi	0x15, 2	; 21
			PORTC &= ~_BV(PC3); // установить "0" на линии 3 порта C
  ca:	ab 98       	cbi	0x15, 3	; 21
			PORTC &= ~_BV(PC4); // установить "0" на линии 4 порта C
  cc:	ac 98       	cbi	0x15, 4	; 21
  ce:	ea cf       	rjmp	.-44     	; 0xa4 <main+0x18>
		}
		if(c=='d') {
  d0:	84 36       	cpi	r24, 0x64	; 100
  d2:	29 f4       	brne	.+10     	; 0xde <main+0x52>
			PORTC &= ~_BV(PC1); // установить "0" на линии 1 порта C
  d4:	a9 98       	cbi	0x15, 1	; 21
			PORTC |= _BV(PC2); // установить "1" на линии 2 порта C
  d6:	aa 9a       	sbi	0x15, 2	; 21
			PORTC |= _BV(PC3); // установить "1" на линии 3 порта C
  d8:	ab 9a       	sbi	0x15, 3	; 21
			PORTC &= ~_BV(PC4); // установить "0" на линии 4 порта C
  da:	ac 98       	cbi	0x15, 4	; 21
  dc:	e3 cf       	rjmp	.-58     	; 0xa4 <main+0x18>
			
		}
		if (c=='a') {
  de:	81 36       	cpi	r24, 0x61	; 97
  e0:	09 f7       	brne	.-62     	; 0xa4 <main+0x18>
			PORTC |= _BV(PC1); // установить "1" на линии 1 порта C
  e2:	a9 9a       	sbi	0x15, 1	; 21
			PORTC &= ~_BV(PC2); // установить "0" на линии 2 порта C
  e4:	aa 98       	cbi	0x15, 2	; 21
			PORTC &= ~_BV(PC3); // установить "0" на линии 3 порта C
  e6:	ab 98       	cbi	0x15, 3	; 21
			PORTC |= _BV(PC4); // установить "1" на линии 4 порта C
  e8:	ac 9a       	sbi	0x15, 4	; 21
  ea:	dc cf       	rjmp	.-72     	; 0xa4 <main+0x18>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
